// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Property {
  id                     String   @id @default(uuid())
  reference              String   @unique @default(dbgenerated("concat('REVA_', substring(replace(gen_random_uuid()::text, '-', ''), 1, 12))")) // Optional DB default if supported
  references             String[] // Other references for a transaction
  title                  String?  // Nullable
  description            String?  // Nullable

  status                 String?
  paymentStatus          String?

  paymentLink            String?  // Nullable

  statusMessage          String?  // Nullable
  error                  String?  // Nullable

  userId                 String
  user                   RevaUser @relation(fields: [userId], references: [id])

  address                String
  lat                    Float?
  lng                    Float?
  lga                    String
  parcelId               String?  // Optional

  totalCost              Float
  documentsUrls          String[] // Array of URLs
  comments               String?  // Optional
  deleted                Boolean   @default(false) // Optional field to indicate if the property is deleted

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  report                 Json?    // report from reva
}

model OneTimeUserProperty {
  id                     String   @id @default(uuid())
  reference              String   @unique @default(dbgenerated("concat('reva_', substring(replace(gen_random_uuid()::text, '-', ''), 1, 12))")) // Optional DB default if supported
  requester              String?  // Nullable (default "")
  description            String?  // Nullable

  status                 String?
  paymentStatus          String?

  statusMessage          String?  // Nullable
  error                  String?  // Nullable

  email                  String
  userPhoneNumber        String?  // Optional

  address                String
  lat                    Float?
  lng                    Float?
  lga                    String
  parcelId               String?  // Optional

  totalCost              Float
  documentsUrls          String[] // Array of URLs
  comments               String?  // Optional

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  report                 Json?    // report from reva
}


enum Role {
  USER
  ADMIN
  SUPERADMIN
}


// Placeholder User model for relation
model RevaUser {
  id                 String              @id @default(uuid()) // Unique identifier
  kindeId            String              @unique
  email              String              @unique

  firstName          String
  lastName           String

  role               Role                @default(USER)
  emailVerified      Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  properties         Property[]
}


enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
  PAYMENT
  PROPERTY
}


model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  readBy          String[]         @default([]) // List of userIds who read it
  dismissedBy     String[]         @default([]) // List of userIds who dismissed it
  userIds         String[]         @default([]) // If null/empty => general
  link            String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([createdAt])
}
